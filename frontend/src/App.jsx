import { Signup } from "./pages/Signup"
import { BrowserRouter, Route, Routes, Navigate } from "react-router-dom"
import { Home } from "./pages/Home"
import { Login } from "./pages/Login"
import axios from "axios"
import { useEffect, useState } from "react"
import { useAuth } from "./context/AuthProvider"

function App() {

    // ðŸ”‘ STEP 2: Remove or comment out the local useState for user/setUser
    // const [user, setUser] = useState(null); 

    // ðŸ”‘ STEP 3: Destructure setUser from your useAuth context
    const { setUser } = useAuth(); 

Â  Â  useEffect(() => {
Â  Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  Â  if (token) {
Â  Â  Â  Â  Â  Â  axios
Â  Â  Â  Â  Â  Â  Â  Â  .get("http://localhost:5000/api/auth/verifytoken", {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  Â  .then((res) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setUser(res.data.user); // This now calls the context's setter
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  Â  .catch(() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  localStorage.removeItem("token");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setUser(null); // This now calls the context's setter (Fixes the error)
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  // ðŸ”‘ STEP 4: Add setUser to the dependency array
Â  Â  }, [setUser]);

//   const [user, setUser] = useState(null);

// useEffect(() => {
//   const storedUser = localStorage.getItem("user");
//   if (storedUser) {
//     setUser(JSON.parse(storedUser));
//   }
// }, []);

  return (
      <div>
        
        <BrowserRouter>
        <Routes>
        <Route path="/" element={<Navigate to="/register" />} />

          <Route path="/home" element={<Home />} />
          <Route path="/register" element={<Signup />} />
          <Route path="/login" element={<Login />} />
        </Routes>
        </BrowserRouter>
        
      </div>
  )
}

export default App
